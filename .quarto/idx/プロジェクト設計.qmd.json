{"title":"Memo: プロジェクト設計","markdown":{"yaml":{"title":"Memo: プロジェクト設計","subtitle":"ChatGPTと考えたもの","author":"yamanori99","date":"today","output":{"html_document":{"toc":true,"code-fold":true}}},"headingText":"設計を考える","containsRefs":false,"markdown":"\n\n\n以下のような設計を試みることが効果的です。\n\n## プロジェクト構造の設計\n\nプロジェクトは、以下のディレクトリ構造にすると良いでしょう。\n\n``` default\nproject-root/\n├── data/              # データセットやシミュレーションの結果\n├── scripts/           # 各言語（C++, R, Python）のコード\n├── analysis/          # データの分析用スクリプト\n├── docs/              # レポート、論文、発表資料を出力する場所\n├── references/        # 参考文献や先行研究\n├── quarto/            # Quartoのテンプレートや設定ファイル\n└── _quarto.yml        # Quartoのプロジェクト設定ファイル\n```\n\n-   data ディレクトリに実験やシミュレーションの結果を格納します。\n-   scripts ディレクトリには各言語で書かれたシミュレーションコードを保存し、Quartoから動的に呼び出すことができるようにします。\n-   analysis には分析用のコードを格納し、シミュレーション結果の分析や可視化を行います。\n-   docs ディレクトリにはQuartoによって生成された文書（HTML, PDF, Slides）が保存されます。\n-   references には文献や先行研究をまとめておき、簡単に参照できるようにします。\n-   \\_quarto.yml はプロジェクトの設定を管理するためのファイルです。\n\n## 再現性のある文書\n\nQuartoは動的なコードの実行結果を含む文書を作成することができるため、RやPythonのコードブロックをQuartoファイル内に直接埋め込みます。また、C++のコードは外部スクリプトとして保存し、Quartoからシェルコマンドで呼び出す形が良いでしょう。\n\n## \\_quarto.yml の設定\n\n``` yml\nproject:\n  title: \"シミュレーション分析プロジェクト\"\n  author: \"ユーザー名\"\n  output:\n    html: \n      toc: true  # 目次\n      code-fold: true  # コードの折りたたみ\n    pdf: \n      toc: true\n    docx: true\n    beamer: true  # 発表資料\n\nbibliography: references/references.bib  # 参考文献\n\nexecute:\n  echo: true  # コード出力を表示\n  warning: false  # 警告メッセージを非表示\n  error: false  # エラーメッセージを非表示\n\nformat: \n  html: \n    theme: \"flatly\"  # テーマを指定\n```\n\n## 動的文書の作成\n\n各言語のコードをQuartoファイル内に動的に埋め込むことで、実行時にシミュレーションや分析が行われます。例えば、Pythonのコードブロックは次のように書きます。\n\n``` python\nimport numpy as np\n# シミュレーションコード\nresults = np.random.rand(10)\nprint(results)\n```\n\nRやC++も同様に、Quartoを通して実行可能です。\n\n## 複数の言語を統合\n\nQuartoはRとPythonのコードを直接サポートしていますが、C++の場合は以下のように外部スクリプトを呼び出す方法が便利です。\n\n``` zsh\ng++ scripts/simulation.cpp -o simulation\n./simulation\n```\n\n## バージョン管理\n\nプロジェクト全体をGitで管理し、定期的に更新や改善を加えることを推奨します。また、GitHubなどで共同作業も行いやすくなります。\n\n## 発表と論文執筆\n\nQuartoはHTMLスライド、PDF、Wordドキュメントなど多様なフォーマットで出力できるため、プレゼン資料や論文のテンプレートを作成し、文書のスタイルやレイアウトを統一することができます。\n\nこのような設計でプロジェクトを進めると、シミュレーション結果の再現性を保ちながら、体系的かつ効率的に作業が進められます。\n\n# パスの管理\n\nQuartoでレンダリングを行う際に、ファイルのパスに問題が生じることはよくあります。これを防ぐためには、いくつかの工夫が必要です。ファイル構造を設計する際のポイントと、パスの問題を解決するための方法を以下にまとめます。\n\n## 相対パスの使用\n\nプロジェクト内のファイルやディレクトリにアクセスするときは、相対パスを使うことが基本です。Quartoプロジェクトはルートディレクトリからの相対パスを使うので、各ファイルやディレクトリはproject-rootを基準に指定します。\n\nたとえば、次のようにスクリプトやデータファイルを参照します。\n\n``` r\n# Rコード内でデータを読み込む\n\ndata \\<- read.csv(\"data/mydata.csv\")\n```\n\n``` bash\n# Bashで外部プログラムを実行する例\n\ng++ scripts/simulation.cpp -o simulation ./simulation\n```\n\n## Quarto YAMLでの設定\n\nQuartoのプロジェクト設定ファイル（\\_quarto.yml）を活用し、ルートディレクトリやデフォルトパスを明確に定義します。これにより、各ドキュメント内でのパスの指定を簡素化できます。\n\nproject: type: website output-dir: docs/ \\# 出力ファイルを保存する場所を明示\n\nこれにより、レンダリング時に出力されるHTMLやPDFファイルが自動的にdocs/ディレクトリに保存されます。\n\n## hereパッケージの利用（Rの場合）\n\nRでは、hereパッケージを使ってプロジェクトのルートディレクトリを動的に検出し、そこから相対パスを指定する方法が便利です。\n\nlibrary(here)\n\ndata \\<- read.csv(here(\"data\", \"mydata.csv\"))\n\nこれにより、Quartoでの実行時にパスの問題を回避しやすくなります。hereを使うことで、ディレクトリ構造が複雑になっても、確実にファイルを参照できます。\n\n## 外部プログラムのパスの設定\n\nC++やPythonスクリプトを実行する際に、Quarto内で外部プログラムを呼び出す場合、絶対パスを明示することも一つの方法です。ただし、これにはファイルが動かないことを前提としています。プロジェクト全体を再配置する可能性がある場合、相対パスが安全です。\n\n## パスのテスト\n\nプロジェクトの規模が大きくなる前に、パスの問題を早期に発見して解決するために、各コードブロックでファイルのパスが正しく機能するかどうかを確認するテストを行うのも良い習慣です。\n\n``` r\n# Rでパスが通っているか確認するテスト\n\nif (!file.exists(\"data/mydata.csv\")) {\n  stop(\"データファイルが見つかりません\")\n}\n```\n\n## Quartoのresourcesオプション\n\nQuartoのYAMLでresourcesオプションを使うと、必要なファイルを特定のディレクトリに集めて処理することができます。これは特に複数のファイルを参照する場合に便利です。\n\n```yaml\nformat: \n  html: \n    resources: \\[\"data/mydata.csv\", \"scripts/simulation.cpp\"\\]\n```\n\nこれにより、ドキュメントのレンダリング時にこれらのリソースが確実に含まれるようになります。\n\nこれらの対策を講じることで、パスの問題\n\n------------------------------------------------------------------------\n\n# Cmakeを使用するときのC++コードの管理\n\nCMakeを使用してC++のコードをコンパイルする場合、Quartoプロジェクト内での管理方法は以下のようにすることが考えられます。\n\n## CMakeの設定ファイルを用意する\n\nまず、CMakeを使用するために、CMakeLists.txtという設定ファイルをscriptsディレクトリ内に作成します。このファイルでは、どのソースファイルをコンパイルするか、どのライブラリをリンクするかなどを指定します。\n\nscripts/CMakeLists.txtの例\n\n``` cmake\ncmake_minimum_required(VERSION 3.10)\nproject(Simulation)\n\n# ソースファイルの指定\nset(SOURCES simulation.cpp)\n\n# 実行可能ファイルの作成\nadd_executable(simulation ${SOURCES})\n```\n\n## QuartoファイルからCMakeを呼び出す\n\nQuartoプロジェクト内のRやPythonのコードブロックからCMakeを実行して、C++のプログラムをコンパイルします。以下は、その方法の例です。\n\nQuartoファイル内でのCMakeの使用例\n\n``` bash\n# C++コードのコンパイル\n# CMakeでプロジェクトをビルド\nmkdir -p scripts/build\ncd scripts/build\ncmake ..\nmake\n```\n\n## 実行ファイルの呼び出し\n\nコンパイルが完了したら、Quarto内で生成された実行可能ファイルを呼び出すことができます。以下のように、Bashのコードブロックを使って実行します。\n\n``` bash\n# 実行ファイルの呼び出し例\n# コンパイルしたプログラムを実行\n./scripts/build/simulation\n```\n\n## 全体のディレクトリ構造\n\n最終的なディレクトリ構造は次のようになります。\n\n``` default\nproject-root/\n├── data/\n├── scripts/\n│   ├── CMakeLists.txt\n│   ├── simulation.cpp\n│   └── build/  # CMakeによって生成されるビルドディレクトリ\n├── analysis/\n├── docs/\n├── references/\n├── quarto/\n└── _quarto.yml\n```\n\n## 注意点\n\n-   CMakeを使用する場合、ビルドが初めて行われる際は、`scripts/build`ディレクトリを事前に作成する必要があります。これにより、ビルドアーティファクトが整理され、プロジェクトの構造が保たれます。\n\n-   `CMakeLists.txt`を適切に設定することで、依存関係やコンパイルオプションを管理できます。\n\n-   QuartoからCMakeを呼び出す際には、パスに注意して相対パスで指定することが重要です。\n\nこの方法を用いることで、Quartoプロジェクト内でCMakeによるC++コードの管理がスムーズに行えます。","srcMarkdownNoYaml":"\n\n# 設計を考える\n\n以下のような設計を試みることが効果的です。\n\n## プロジェクト構造の設計\n\nプロジェクトは、以下のディレクトリ構造にすると良いでしょう。\n\n``` default\nproject-root/\n├── data/              # データセットやシミュレーションの結果\n├── scripts/           # 各言語（C++, R, Python）のコード\n├── analysis/          # データの分析用スクリプト\n├── docs/              # レポート、論文、発表資料を出力する場所\n├── references/        # 参考文献や先行研究\n├── quarto/            # Quartoのテンプレートや設定ファイル\n└── _quarto.yml        # Quartoのプロジェクト設定ファイル\n```\n\n-   data ディレクトリに実験やシミュレーションの結果を格納します。\n-   scripts ディレクトリには各言語で書かれたシミュレーションコードを保存し、Quartoから動的に呼び出すことができるようにします。\n-   analysis には分析用のコードを格納し、シミュレーション結果の分析や可視化を行います。\n-   docs ディレクトリにはQuartoによって生成された文書（HTML, PDF, Slides）が保存されます。\n-   references には文献や先行研究をまとめておき、簡単に参照できるようにします。\n-   \\_quarto.yml はプロジェクトの設定を管理するためのファイルです。\n\n## 再現性のある文書\n\nQuartoは動的なコードの実行結果を含む文書を作成することができるため、RやPythonのコードブロックをQuartoファイル内に直接埋め込みます。また、C++のコードは外部スクリプトとして保存し、Quartoからシェルコマンドで呼び出す形が良いでしょう。\n\n## \\_quarto.yml の設定\n\n``` yml\nproject:\n  title: \"シミュレーション分析プロジェクト\"\n  author: \"ユーザー名\"\n  output:\n    html: \n      toc: true  # 目次\n      code-fold: true  # コードの折りたたみ\n    pdf: \n      toc: true\n    docx: true\n    beamer: true  # 発表資料\n\nbibliography: references/references.bib  # 参考文献\n\nexecute:\n  echo: true  # コード出力を表示\n  warning: false  # 警告メッセージを非表示\n  error: false  # エラーメッセージを非表示\n\nformat: \n  html: \n    theme: \"flatly\"  # テーマを指定\n```\n\n## 動的文書の作成\n\n各言語のコードをQuartoファイル内に動的に埋め込むことで、実行時にシミュレーションや分析が行われます。例えば、Pythonのコードブロックは次のように書きます。\n\n``` python\nimport numpy as np\n# シミュレーションコード\nresults = np.random.rand(10)\nprint(results)\n```\n\nRやC++も同様に、Quartoを通して実行可能です。\n\n## 複数の言語を統合\n\nQuartoはRとPythonのコードを直接サポートしていますが、C++の場合は以下のように外部スクリプトを呼び出す方法が便利です。\n\n``` zsh\ng++ scripts/simulation.cpp -o simulation\n./simulation\n```\n\n## バージョン管理\n\nプロジェクト全体をGitで管理し、定期的に更新や改善を加えることを推奨します。また、GitHubなどで共同作業も行いやすくなります。\n\n## 発表と論文執筆\n\nQuartoはHTMLスライド、PDF、Wordドキュメントなど多様なフォーマットで出力できるため、プレゼン資料や論文のテンプレートを作成し、文書のスタイルやレイアウトを統一することができます。\n\nこのような設計でプロジェクトを進めると、シミュレーション結果の再現性を保ちながら、体系的かつ効率的に作業が進められます。\n\n# パスの管理\n\nQuartoでレンダリングを行う際に、ファイルのパスに問題が生じることはよくあります。これを防ぐためには、いくつかの工夫が必要です。ファイル構造を設計する際のポイントと、パスの問題を解決するための方法を以下にまとめます。\n\n## 相対パスの使用\n\nプロジェクト内のファイルやディレクトリにアクセスするときは、相対パスを使うことが基本です。Quartoプロジェクトはルートディレクトリからの相対パスを使うので、各ファイルやディレクトリはproject-rootを基準に指定します。\n\nたとえば、次のようにスクリプトやデータファイルを参照します。\n\n``` r\n# Rコード内でデータを読み込む\n\ndata \\<- read.csv(\"data/mydata.csv\")\n```\n\n``` bash\n# Bashで外部プログラムを実行する例\n\ng++ scripts/simulation.cpp -o simulation ./simulation\n```\n\n## Quarto YAMLでの設定\n\nQuartoのプロジェクト設定ファイル（\\_quarto.yml）を活用し、ルートディレクトリやデフォルトパスを明確に定義します。これにより、各ドキュメント内でのパスの指定を簡素化できます。\n\nproject: type: website output-dir: docs/ \\# 出力ファイルを保存する場所を明示\n\nこれにより、レンダリング時に出力されるHTMLやPDFファイルが自動的にdocs/ディレクトリに保存されます。\n\n## hereパッケージの利用（Rの場合）\n\nRでは、hereパッケージを使ってプロジェクトのルートディレクトリを動的に検出し、そこから相対パスを指定する方法が便利です。\n\nlibrary(here)\n\ndata \\<- read.csv(here(\"data\", \"mydata.csv\"))\n\nこれにより、Quartoでの実行時にパスの問題を回避しやすくなります。hereを使うことで、ディレクトリ構造が複雑になっても、確実にファイルを参照できます。\n\n## 外部プログラムのパスの設定\n\nC++やPythonスクリプトを実行する際に、Quarto内で外部プログラムを呼び出す場合、絶対パスを明示することも一つの方法です。ただし、これにはファイルが動かないことを前提としています。プロジェクト全体を再配置する可能性がある場合、相対パスが安全です。\n\n## パスのテスト\n\nプロジェクトの規模が大きくなる前に、パスの問題を早期に発見して解決するために、各コードブロックでファイルのパスが正しく機能するかどうかを確認するテストを行うのも良い習慣です。\n\n``` r\n# Rでパスが通っているか確認するテスト\n\nif (!file.exists(\"data/mydata.csv\")) {\n  stop(\"データファイルが見つかりません\")\n}\n```\n\n## Quartoのresourcesオプション\n\nQuartoのYAMLでresourcesオプションを使うと、必要なファイルを特定のディレクトリに集めて処理することができます。これは特に複数のファイルを参照する場合に便利です。\n\n```yaml\nformat: \n  html: \n    resources: \\[\"data/mydata.csv\", \"scripts/simulation.cpp\"\\]\n```\n\nこれにより、ドキュメントのレンダリング時にこれらのリソースが確実に含まれるようになります。\n\nこれらの対策を講じることで、パスの問題\n\n------------------------------------------------------------------------\n\n# Cmakeを使用するときのC++コードの管理\n\nCMakeを使用してC++のコードをコンパイルする場合、Quartoプロジェクト内での管理方法は以下のようにすることが考えられます。\n\n## CMakeの設定ファイルを用意する\n\nまず、CMakeを使用するために、CMakeLists.txtという設定ファイルをscriptsディレクトリ内に作成します。このファイルでは、どのソースファイルをコンパイルするか、どのライブラリをリンクするかなどを指定します。\n\nscripts/CMakeLists.txtの例\n\n``` cmake\ncmake_minimum_required(VERSION 3.10)\nproject(Simulation)\n\n# ソースファイルの指定\nset(SOURCES simulation.cpp)\n\n# 実行可能ファイルの作成\nadd_executable(simulation ${SOURCES})\n```\n\n## QuartoファイルからCMakeを呼び出す\n\nQuartoプロジェクト内のRやPythonのコードブロックからCMakeを実行して、C++のプログラムをコンパイルします。以下は、その方法の例です。\n\nQuartoファイル内でのCMakeの使用例\n\n``` bash\n# C++コードのコンパイル\n# CMakeでプロジェクトをビルド\nmkdir -p scripts/build\ncd scripts/build\ncmake ..\nmake\n```\n\n## 実行ファイルの呼び出し\n\nコンパイルが完了したら、Quarto内で生成された実行可能ファイルを呼び出すことができます。以下のように、Bashのコードブロックを使って実行します。\n\n``` bash\n# 実行ファイルの呼び出し例\n# コンパイルしたプログラムを実行\n./scripts/build/simulation\n```\n\n## 全体のディレクトリ構造\n\n最終的なディレクトリ構造は次のようになります。\n\n``` default\nproject-root/\n├── data/\n├── scripts/\n│   ├── CMakeLists.txt\n│   ├── simulation.cpp\n│   └── build/  # CMakeによって生成されるビルドディレクトリ\n├── analysis/\n├── docs/\n├── references/\n├── quarto/\n└── _quarto.yml\n```\n\n## 注意点\n\n-   CMakeを使用する場合、ビルドが初めて行われる際は、`scripts/build`ディレクトリを事前に作成する必要があります。これにより、ビルドアーティファクトが整理され、プロジェクトの構造が保たれます。\n\n-   `CMakeLists.txt`を適切に設定することで、依存関係やコンパイルオプションを管理できます。\n\n-   QuartoからCMakeを呼び出す際には、パスに注意して相対パスで指定することが重要です。\n\nこの方法を用いることで、Quartoプロジェクト内でCMakeによるC++コードの管理がスムーズに行えます。"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":{"html_document":{"toc":true,"code-fold":true}},"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":true,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"produce-source-notebook":true,"notebook-preserve-cells":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":true,"highlight-style":"github","output-file":"プロジェクト設計.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.53","manuscript":{"article":"index.qmd","notebooks":[{"notebook":"analysis/analysis.qmd"},{"notebook":"simulation/simulation.qmd"},{"notebook":"プロジェクト設計.qmd"}],"mecaFile":"index-meca.zip"},"toc-location":"left","bibliography":["../references/references.bib"],"csl":"apa.csl","link-citations":true,"editor":"visual","knitr":{"opts_chunk":{"dev":"ragg_png","dpi":400,"fig-align":"center"}},"quarto-internal":{"subarticles":[{"input":"/Users/tak/Workspace/a0_research/temp-research/analysis/analysis.qmd","token":"nb-1","render":true},{"input":"/Users/tak/Workspace/a0_research/temp-research/simulation/simulation.qmd","token":"nb-2","render":true},{"input":"/Users/tak/Workspace/a0_research/temp-research/プロジェクト設計.qmd","token":"nb-3","render":true}]},"notebook-preview-options":{"back":true},"theme":"cosmo","title-block-style":"manuscript","lightbox":"auto","comments":false,"tmeme":"defaut","title":"Memo: プロジェクト設計","subtitle":"ChatGPTと考えたもの","author":"yamanori99","date":"today","clear-hidden-classes":"none","remove-hidden":"all","unroll-markdown-cells":true},"extensions":{"book":{"multiFile":true}}},"docx":{"identifier":{"display-name":"MS Word","target-format":"docx","base-format":"docx"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":{"html_document":{"toc":true,"code-fold":true}},"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":true,"prefer-html":false,"output-divs":true,"output-ext":"docx","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"page-width":6.5,"produce-source-notebook":true,"notebook-preserve-cells":true},"pandoc":{"default-image-extension":"png","to":"docx","toc":true,"number-sections":true,"output-file":"プロジェクト設計.docx"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"manuscript":{"article":"index.qmd","notebooks":[{"notebook":"analysis/analysis.qmd"},{"notebook":"simulation/simulation.qmd"},{"notebook":"プロジェクト設計.qmd"}],"mecaFile":"index-meca.zip"},"toc-location":"left","bibliography":["../references/references.bib"],"csl":"apa.csl","link-citations":true,"editor":"visual","knitr":{"opts_chunk":{"dev":"ragg_png","dpi":400,"fig-align":"center"}},"quarto-internal":{"subarticles":[{"input":"/Users/tak/Workspace/a0_research/temp-research/analysis/analysis.qmd","token":"nb-1","render":true},{"input":"/Users/tak/Workspace/a0_research/temp-research/simulation/simulation.qmd","token":"nb-2","render":true},{"input":"/Users/tak/Workspace/a0_research/temp-research/プロジェクト設計.qmd","token":"nb-3","render":true}]},"notebook-preview-options":{"back":true},"theme":"cosmo","title-block-style":"manuscript","lightbox":"auto","title":"Memo: プロジェクト設計","subtitle":"ChatGPTと考えたもの","author":"yamanori99","date":"today","clear-hidden-classes":"none","remove-hidden":"all","unroll-markdown-cells":true},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","docx"]}